const { Client, LocalAuth } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');
const express = require('express');
const fs = require('fs');
const path = require('path');

// Configuration
const PORT = 3001;
const app = express();

// Configuration WhatsApp Business (votre num√©ro principal)
const BUSINESS_WHATSAPP = "+237686577791"; // Votre num√©ro WhatsApp Business

// Donn√©es de qualification avec descriptions d√©taill√©es
const services = {
    '1': {
        name: 'Site web professionnel',
        description: 'üåê Votre vitrine digitale pour attirer et convertir vos clients en ligne',
        budgets: ['150K - 250K FCFA', '250K - 450K FCFA', '450K - 600K FCFA'],
        types: [
            {
                name: 'Site vitrine',
                desc: 'Pr√©sentation √©l√©gante de votre entreprise pour gagner en cr√©dibilit√© üèÜ'
            },
            {
                name: 'Site e-commerce', 
                desc: 'Vendez vos produits 24h/24 et automatisez vos ventes en ligne üí∞'
            },
            {
                name: 'Application web',
                desc: 'Solution sur-mesure pour optimiser vos processus m√©tier üöÄ'
            }
        ]
    },
    '2': {
        name: 'Solutions IA et automatisation',
        description: 'ü§ñ R√©volutionnez votre productivit√© et r√©duisez vos co√ªts avec l\'IA',
        budgets: ['400K - 800K FCFA', '800K - 1.8M FCFA', '1.8M - 3.5M FCFA'],
        types: [
            {
                name: 'Chatbot simple',
                desc: 'Assistant virtuel pour r√©pondre √† vos clients 24h/24 et filtrer les prospects üí¨'
            },
            {
                name: 'Automatisation m√©tier',
                desc: '√âliminez les t√¢ches r√©p√©titives et gagnez 5-10h/semaine ‚ö°'
            },
            {
                name: 'IA conversationnelle compl√®te',
                desc: 'Assistant IA avanc√© qui comprend et traite vos demandes complexes üß†'
            }
        ]
    },
    '3': {
        name: 'Marketing digital',
        description: 'üìà D√©veloppez votre visibilit√© et g√©n√©rez plus de leads qualifi√©s',
        budgets: ['150K - 300K FCFA', '300K - 600K FCFA', '600K+ FCFA'],
        types: [
            {
                name: 'Meta Ads',
                desc: 'Campagnes publicitaires cibl√©es pour attirer vos clients id√©aux üéØ'
            },
            {
                name: 'SEO et r√©f√©rencement',
                desc: 'Apparaissez en premier sur Google quand on cherche vos services üîç'
            },
            {
                name: 'Strat√©gie digitale compl√®te',
                desc: 'Plan marketing global pour dominer votre march√© en ligne üìä'
            }
        ]
    }
};

// Fonction de d√©tection intelligente des r√©ponses
function parseUserChoice(text) {
    const normalized = text.toLowerCase().trim();
    
    // Mappings pour tous les formats possibles
    const choiceMap = {
        // Chiffres
        '1': '1', '2': '2', '3': '3', '4': '4',
        // Lettres fran√ßaises
        'un': '1', 'une': '1', 'premier': '1', 'premi√®re': '1', 'a': '1',
        'deux': '2', 'deuxi√®me': '2', 'second': '2', 'seconde': '2', 'b': '2',
        'trois': '3', 'troisi√®me': '3', 'c': '3',
        'quatre': '4', 'quatri√®me': '4', 'd': '4',
        // Lettres anglaises
        'one': '1', 'first': '1',
        'two': '2', 'second': '2',
        'three': '3', 'third': '3',
        'four': '4', 'fourth': '4',
        // Chiffres romains
        'i': '1', 'ii': '2', 'iii': '3', 'iv': '4',
        // Autres variations
        '1er': '1', '1√®re': '1', '2√®me': '2', '3√®me': '3', '4√®me': '4'
    };
    
    // Recherche directe
    if (choiceMap[normalized]) {
        return choiceMap[normalized];
    }
    
    // Recherche par mots-cl√©s dans le texte
    for (const [key, value] of Object.entries(choiceMap)) {
        if (normalized.includes(key)) {
            return value;
        }
    }
    
    return null;
}

// Stockage des conversations
let conversations = {};
let prospects = [];

// Initialisation du client WhatsApp
const client = new Client({
    authStrategy: new LocalAuth(),
    puppeteer: {
        headless: true,
        args: ['--no-sandbox', '--disable-setuid-sandbox']
    }
});

// Variable pour stocker le code de jumelage
let pairingCode = null;

// G√©n√©ration du QR code ET code de jumelage
client.on('qr', (qr) => {
    console.log('\nüîó DEUX M√âTHODES DE CONNEXION DISPONIBLES :');
    console.log('\nüì± M√âTHODE 1 - QR CODE :');
    console.log('Scannez ce QR code avec WhatsApp sur votre t√©l√©phone :');
    qrcode.generate(qr, { small: true });
    
    console.log('\nüî¢ M√âTHODE 2 - CODE DE JUMELAGE :');
    console.log('Si le QR code ne fonctionne pas, utilisez le code de jumelage ci-dessous');
    console.log('üëÜ Tapez "code" dans le terminal pour obtenir le code √† 8 chiffres');
});

// Support du code de jumelage
client.on('code', (code) => {
    pairingCode = code;
    console.log('\nüî¢ CODE DE JUMELAGE √Ä 8 CHIFFRES :');
    console.log(`üì± ${code}`);
    console.log('\n√âtapes sur votre t√©l√©phone :');
    console.log('1. Ouvrez WhatsApp');
    console.log('2. Allez dans Param√®tres > Appareils li√©s');
    console.log('3. Appuyez sur "Lier un appareil"');
    console.log('4. S√©lectionnez "Lier avec un num√©ro"');
    console.log(`5. Entrez ce code : ${code}`);
    console.log('\n‚è±Ô∏è Ce code expire dans 2 minutes !');
});

// Connexion √©tablie
client.on('ready', () => {
    console.log('\n‚úÖ Bot WhatsApp SmartScale WebTech d√©marr√© !');
    console.log('üåê Dashboard disponible sur : http://localhost:' + PORT);
    console.log('üì± WhatsApp connect√© et pr√™t √† recevoir des messages !');
});

// Gestion des messages
client.on('message', async (message) => {
    if (message.from.includes('@g.us')) return; // Ignorer les groupes
    if (message.fromMe) return; // Ignorer nos propres messages
    
    const phoneNumber = message.from;
    const messageText = message.body.trim();
    
    console.log(`üì® Message re√ßu de ${phoneNumber}: "${messageText}"`);
    
    // Initialiser la conversation si n√©cessaire SANS envoyer de message automatique
    if (!conversations[phoneNumber]) {
        conversations[phoneNumber] = {
            step: 'accueil',
            data: {},
            timestamp: new Date()
        };
        console.log(`üÜï Nouvelle conversation initi√©e pour ${phoneNumber}`);
    }
    
    // TRAITER LE MESSAGE RE√áU
    await handleConversation(phoneNumber, messageText, message);
});

// Logique de conversation
async function handleConversation(phoneNumber, messageText, message) {
    const conv = conversations[phoneNumber];
    
    console.log(`üîÑ √âtape actuelle: ${conv.step} | Service: ${conv.data.service || 'Non d√©fini'} | WelcomeSent: ${conv.data.welcomeSent || false}`);
    
    try {
        switch (conv.step) {
            case 'accueil':
                console.log(`üìû Traitement accueil pour: "${messageText}"`);
                await handleAccueil(phoneNumber, messageText, message);
                break;
            case 'service_details':
                console.log(`üìã Traitement d√©tails service pour: "${messageText}"`);
                await handleServiceDetails(phoneNumber, messageText, message);
                break;
            case 'budget':
                console.log(`üí∞ Traitement budget pour: "${messageText}"`);
                await handleBudget(phoneNumber, messageText, message);
                break;
            case 'autorite':
                console.log(`üë§ Traitement autorit√© pour: "${messageText}"`);
                await handleAutorite(phoneNumber, messageText, message);
                break;
            case 'timeline':
                console.log(`‚è±Ô∏è Traitement d√©lai pour: "${messageText}"`);
                await handleTimeline(phoneNumber, messageText, message);
                break;
            case 'finalisation':
                console.log(`‚úÖ Finalisation pour: "${messageText}"`);
                await handleFinalisation(phoneNumber, messageText, message);
                break;
            default:
                console.log(`‚ùì √âtape inconnue: ${conv.step}, envoi du message d'accueil`);
                await sendWelcomeMessage(phoneNumber);
        }
    } catch (error) {
        console.error('‚ùå Erreur dans la conversation:', error);
        await client.sendMessage(phoneNumber, "D√©sol√©, une erreur s'est produite. Tapez 'recommencer' pour red√©marrer.");
    }
}

// Accueil
async function handleAccueil(phoneNumber, messageText, message) {
    const conv = conversations[phoneNumber];
    
    // V√©rifier si c'est un red√©marrage
    if (messageText.toLowerCase().includes('recommencer') || messageText.toLowerCase().includes('restart')) {
        await sendWelcomeMessage(phoneNumber);
        return;
    }
    
    // NOUVELLE LOGIQUE : Si pas encore de service ET c'est le premier message
    if (!conv.data.service && !conv.data.welcomeSent) {
        // Marquer que l'accueil a √©t√© envoy√©
        conv.data.welcomeSent = true;
        await sendWelcomeMessage(phoneNumber);
        return;
    }
    
    // TRAITER LA R√âPONSE DE L'UTILISATEUR
    const serviceChoice = parseUserChoice(messageText);
    
    if (serviceChoice && services[serviceChoice]) {
        conv.data.service = serviceChoice;
        conv.step = 'service_details';
        
        const service = services[serviceChoice];
        const options = service.types.map((type, index) => `${index + 1}Ô∏è‚É£ ${type}`).join('\n');
        
        console.log(`‚úÖ Service s√©lectionn√©: ${service.name} pour ${phoneNumber}`);
        
        await client.sendMessage(phoneNumber, 
            `Parfait ! Vous vous int√©ressez √† : *${service.name}*\n\n` +
            `Quel type de projet vous int√©resse le plus ?\n\n${options}\n\n` +
            `R√©pondez par le num√©ro correspondant (1, 2 ou 3).`
        );
    } else {
        console.log(`‚ùå Choix non reconnu: "${messageText}" de ${phoneNumber}`);
        await client.sendMessage(phoneNumber, 
            `Je n'ai pas compris votre choix. Merci de s√©lectionner un num√©ro :\n\n` +
            `1Ô∏è‚É£ Site web professionnel\n` +
            `2Ô∏è‚É£ Solutions IA et automatisation\n` +
            `3Ô∏è‚É£ Marketing digital\n\n` +
            `Vous pouvez r√©pondre par "1", "un", "premier", etc.`
        );
    }
}

// D√©tails du service
async function handleServiceDetails(phoneNumber, messageText, message) {
    const conv = conversations[phoneNumber];
    const serviceChoice = conv.data.service;
    const typeChoice = parseUserChoice(messageText);
    
    if (typeChoice && typeChoice >= '1' && typeChoice <= '3') {
        const typeIndex = parseInt(typeChoice) - 1;
        conv.data.serviceType = services[serviceChoice].types[typeIndex];
        conv.step = 'budget';
        
        const budgetOptions = services[serviceChoice].budgets.map((budget, index) => 
            `${index + 1}Ô∏è‚É£ ${budget}`
        ).join('\n');
        
        console.log(`‚úÖ Type de service s√©lectionn√©: ${conv.data.serviceType} pour ${phoneNumber}`);
        
        await client.sendMessage(phoneNumber, 
            `Parfait ! Vous souhaitez : *${conv.data.serviceType}*\n\n` +
            `Quel est votre budget envisag√© pour ce projet ?\n\n${budgetOptions}\n\n` +
            `R√©pondez par le num√©ro correspondant (1, 2 ou 3).`
        );
    } else {
        console.log(`‚ùå Type non reconnu: "${messageText}" de ${phoneNumber}`);
        await client.sendMessage(phoneNumber, 
            `Je n'ai pas compris votre choix. Merci de s√©lectionner un num√©ro entre 1 et 3 :\n\n` +
            `${services[serviceChoice].types.map((type, index) => `${index + 1}Ô∏è‚É£ ${type}`).join('\n')}\n\n` +
            `Vous pouvez r√©pondre par "1", "deux", "third", etc.`
        );
    }
}

// Budget
async function handleBudget(phoneNumber, messageText, message) {
    const conv = conversations[phoneNumber];
    const serviceChoice = conv.data.service;
    const budgetChoice = parseUserChoice(messageText);
    
    if (budgetChoice && budgetChoice >= '1' && budgetChoice <= '3') {
        const budgetIndex = parseInt(budgetChoice) - 1;
        conv.data.budget = services[serviceChoice].budgets[budgetIndex];
        conv.step = 'autorite';
        
        console.log(`‚úÖ Budget s√©lectionn√©: ${conv.data.budget} pour ${phoneNumber}`);
        
        await client.sendMessage(phoneNumber, 
            `Tr√®s bien ! Budget retenu : *${conv.data.budget}*\n\n` +
            `√ätes-vous la personne qui prend les d√©cisions pour ce type de projet dans votre entreprise ?\n\n` +
            `1Ô∏è‚É£ Oui, je suis le d√©cideur principal\n` +
            `2Ô∏è‚É£ Je participe √† la d√©cision\n` +
            `3Ô∏è‚É£ Je collecte des informations pour mon √©quipe`
        );
    } else {
        console.log(`‚ùå Budget non reconnu: "${messageText}" de ${phoneNumber}`);
        await client.sendMessage(phoneNumber, 
            `Je n'ai pas compris votre choix de budget. Merci de s√©lectionner :\n\n` +
            `${services[serviceChoice].budgets.map((budget, index) => `${index + 1}Ô∏è‚É£ ${budget}`).join('\n')}\n\n` +
            `Vous pouvez r√©pondre par "1", "deux", "third", etc.`
        );
    }
}

// Autorit√©
async function handleAutorite(phoneNumber, messageText, message) {
    const conv = conversations[phoneNumber];
    const autoriteChoice = parseUserChoice(messageText);
    
    if (autoriteChoice && autoriteChoice >= '1' && autoriteChoice <= '3') {
        const autoriteLabels = ['D√©cideur principal', 'Participant d√©cision', 'Collecteur information'];
        const autoriteIndex = parseInt(autoriteChoice) - 1;
        conv.data.autorite = autoriteLabels[autoriteIndex];
        conv.step = 'timeline';
        
        console.log(`‚úÖ Autorit√© s√©lectionn√©e: ${conv.data.autorite} pour ${phoneNumber}`);
        
        await client.sendMessage(phoneNumber, 
            `Not√© ! Profil : *${conv.data.autorite}*\n\n` +
            `Dans quel d√©lai souhaiteriez-vous voir ce projet se concr√©tiser ?\n\n` +
            `1Ô∏è‚É£ 1 mois (Turbo +20%)\n` +
            `2Ô∏è‚É£ 2-3 mois (Standard)\n` +
            `3Ô∏è‚É£ 4-6 mois\n` +
            `4Ô∏è‚É£ Plus tard dans l'ann√©e\n` +
            `5Ô∏è‚É£ Pas de d√©lai pr√©cis`
        );
    } else {
        console.log(`‚ùå Autorit√© non reconnue: "${messageText}" de ${phoneNumber}`);
        await client.sendMessage(phoneNumber, 
            `Je n'ai pas compris votre r√¥le. Merci de s√©lectionner :\n\n` +
            `1Ô∏è‚É£ Oui, je suis le d√©cideur principal\n` +
            `2Ô∏è‚É£ Je participe √† la d√©cision\n` +
            `3Ô∏è‚É£ Je collecte des informations pour mon √©quipe\n\n` +
            `Vous pouvez r√©pondre par "1", "oui", "first", etc.`
        );
    }
}

// Timeline
async function handleTimeline(phoneNumber, messageText, message) {
    const conv = conversations[phoneNumber];
    const timelineChoice = parseUserChoice(messageText);
    
    if (timelineChoice && timelineChoice >= '1' && timelineChoice <= '5') {
        const timelineLabels = ['1 mois', '2-3 mois', '4-6 mois', 'Plus tard', 'Pas de d√©lai pr√©cis'];
        const timelineIndex = parseInt(timelineChoice) - 1;
        conv.data.timeline = timelineLabels[timelineIndex];
        conv.step = 'finalisation';
        
        // Calculer le score
        const score = calculateScore(conv.data);
        conv.data.score = score;
        
        console.log(`‚úÖ Qualification termin√©e pour ${phoneNumber} - Score: ${score}/100`);
        
        // Sauvegarder le prospect
        saveProspect(phoneNumber, conv.data);
        
        // Envoyer la r√©ponse appropri√©e
        await sendFinalResponse(phoneNumber, score, conv.data);
        
        // R√©initialiser la conversation
        conversations[phoneNumber] = {
            step: 'accueil',
            data: {},
            timestamp: new Date()
        };
        
    } else {
        console.log(`‚ùå D√©lai non reconnu: "${messageText}" de ${phoneNumber}`);
        await client.sendMessage(phoneNumber, 
            `Je n'ai pas compris votre d√©lai. Merci de choisir un num√©ro :\n\n` +
            `1Ô∏è‚É£ 1 mois (Turbo +20%)\n` +
            `2Ô∏è‚É£ 2-3 mois (Standard)\n` +
            `3Ô∏è‚É£ 4-6 mois\n` +
            `4Ô∏è‚É£ Plus tard dans l'ann√©e\n` +
            `5Ô∏è‚É£ Pas de d√©lai pr√©cis\n\n` +
            `Vous pouvez r√©pondre par "1", "un", "premier", etc.`
        );
    }
}

// Message de bienvenue
async function sendWelcomeMessage(phoneNumber) {
    // NE PAS recr√©er la conversation si elle existe d√©j√†
    if (!conversations[phoneNumber]) {
        conversations[phoneNumber] = {
            step: 'accueil',
            data: {},
            timestamp: new Date()
        };
    }
    
    // R√©initialiser seulement le flag d'accueil
    conversations[phoneNumber].data.welcomeSent = true;
    
    console.log(`ü§ñ Envoi du message d'accueil √† ${phoneNumber}`);
    
    await client.sendMessage(phoneNumber, 
        `Bonjour ! üëã Je suis l'assistant *SmartScale WebTech*.\n\n` +
        `Je vais vous qualifier rapidement pour vous connecter avec notre expert commercial. Les prix et dur√©es que vous verrez sont des *estimations* - nous pourrons approfondir vos besoins lors de votre √©change avec lui.\n\n` +
        `Quel est votre principal besoin ? üöÄ\n\n` +
        `1Ô∏è‚É£ Site web professionnel üåê\n` +
        `2Ô∏è‚É£ Solutions IA et automatisation ü§ñ\n` +
        `3Ô∏è‚É£ Marketing digital üìà\n\n` +
        `üí° *Plus de d√©tails :* https://smartscalewebtech.netlify.app/\n\n` +
        `R√©pondez par le num√©ro de votre choix (ex: "1", "deux", "IA", etc.) üòä`
    );
}

// Calcul du score de qualification
function calculateScore(data) {
    let score = 0;
    
    // Score bas√© sur le service (Need)
    if (data.service === '2') score += 30; // IA = priorit√©
    else if (data.service === '1') score += 25; // Web
    else score += 20; // Marketing
    
    // Score bas√© sur le budget (Budget)
    if (data.budget && data.budget.includes('600K+') || data.budget.includes('1.2M') || data.budget.includes('3.5M')) {
        score += 25;
    } else if (data.budget && (data.budget.includes('500K') || data.budget.includes('600K'))) {
        score += 20;
    } else if (data.budget && (data.budget.includes('250K') || data.budget.includes('300K'))) {
        score += 15;
    } else {
        score += 10;
    }
    
    // Score bas√© sur l'autorit√© (Authority)
    if (data.autorite === 'D√©cideur principal') score += 25;
    else if (data.autorite === 'Participant d√©cision') score += 15;
    else score += 5;
    
    // Score bas√© sur la timeline (Timeline) - D√âLAIS CORRECTS
    if (data.timeline === '1 mois') score += 25; // Turbo = meilleur score
    else if (data.timeline === '2-3 mois') score += 20; // Standard
    else if (data.timeline === '4-6 mois') score += 15;
    else if (data.timeline === 'Plus tard') score += 10;
    else score += 5;
    
    return score;
}

// R√©ponse finale bas√©e sur le score
async function sendFinalResponse(phoneNumber, score, data) {
    const serviceName = services[data.service].name;
    const qualCode = `QUAL-${Date.now().toString().slice(-4)}`;
    
    if (score >= 75) {
        // Prospect CHAUD - Redirection automatique vers WhatsApp Business
        const businessMessage = `*PROSPECT QUALIFI√â TRANSF√âR√â*\n\n` +
            `Bonjour ! Je suis un prospect qualifi√© transf√©r√© automatiquement par votre bot de qualification.\n\n` +
            `*Mon profil :*\n` +
            `‚Ä¢ Service souhait√© : ${data.serviceType}\n` +
            `‚Ä¢ Budget : ${data.budget}\n` +
            `‚Ä¢ D√©lai : ${data.timeline}\n` +
            `‚Ä¢ Score de qualification : ${score}/100\n` +
            `‚Ä¢ Code de r√©f√©rence : ${qualCode}\n\n` +
            `Je suis pr√™t(e) √† discuter de mon projet avec votre √©quipe.`;

        // Message au prospect
        await client.sendMessage(phoneNumber, 
            `üéØ *Excellent !* Votre projet de *${serviceName}* correspond parfaitement √† notre expertise.\n\n` +
            `*Votre profil :*\n` +
            `‚Ä¢ Service : ${data.serviceType}\n` +
            `‚Ä¢ Budget : ${data.budget}\n` +
            `‚Ä¢ D√©lai : ${data.timeline}\n` +
            `‚Ä¢ Score : ${score}/100 (Prospect prioritaire)\n\n` +
            `üîÑ *Je vous transf√®re automatiquement vers notre √©quipe commerciale.*\n\n` +
            `‚è±Ô∏è *Temps d'attente estim√© : 2-4 heures*\n\n` +
            `*Code de r√©f√©rence : ${qualCode}*`
        );

        // Redirection vers WhatsApp Business
        setTimeout(async () => {
            const businessUrl = `https://wa.me/${BUSINESS_WHATSAPP.replace(/[^0-9]/g, '')}?text=${encodeURIComponent(businessMessage)}`;
            
            await client.sendMessage(phoneNumber, 
                `üöÄ *Transfert imm√©diat vers notre √©quipe :*\n\n` +
                `Cliquez sur ce lien pour continuer la conversation avec notre √©quipe commerciale :\n\n` +
                `${businessUrl}\n\n` +
                `*Ou contactez directement :*\n` +
                `üìû ${BUSINESS_WHATSAPP}\n` +
                `üìß launlaferdlance2025@gmail.com`
            );
        }, 2000);

        // Notification interne (log)
        console.log(`üî• PROSPECT CHAUD TRANSF√âR√â - Score: ${score} - Code: ${qualCode}`);
        
    } else if (score >= 50) {
        // Prospect TI√àDE
        await client.sendMessage(phoneNumber, 
            `üëç *Int√©ressant !* Votre projet de *${serviceName}* est r√©alisable.\n\n` +
            `*Votre profil :*\n` +
            `‚Ä¢ Service : ${data.serviceType}\n` +
            `‚Ä¢ Budget : ${data.budget}\n` +
            `‚Ä¢ D√©lai : ${data.timeline}\n` +
            `‚Ä¢ Score : ${score}/100\n\n` +
            `Je vous invite √† consulter nos r√©alisations pour mieux √©valuer notre expertise.\n\n` +
            `üåê Site web : https://smartscalewebtech.netlify.app\n` +
            `üìû Contact direct : ${BUSINESS_WHATSAPP}\n\n` +
            `*Recontactez-nous quand votre projet sera plus pr√©cis !*`
        );
    } else {
        // Prospect FROID
        await client.sendMessage(phoneNumber, 
            `üìö *Merci* pour votre int√©r√™t pour *${serviceName}* !\n\n` +
            `Votre projet est encore en phase de r√©flexion, ce qui est parfaitement normal.\n\n` +
            `Je vous invite √† consulter nos ressources gratuites :\n\n` +
            `üåê Site web : https://smartscalewebtech.netlify.app\n` +
            `üì± WhatsApp : ${BUSINESS_WHATSAPP}\n\n` +
            `*Recontactez-nous quand vous aurez d√©fini vos besoins plus pr√©cis√©ment !*`
        );
    }
}

// Sauvegarde des prospects
function saveProspect(phoneNumber, data) {
    const prospect = {
        phoneNumber,
        timestamp: new Date().toISOString(),
        service: services[data.service].name,
        serviceType: data.serviceType,
        budget: data.budget,
        autorite: data.autorite,
        timeline: data.timeline,
        score: data.score
    };
    
    prospects.push(prospect);
    
    // Sauvegarde dans fichier
    fs.writeFileSync('./prospects.json', JSON.stringify(prospects, null, 2));
    
    console.log(`üìä Nouveau prospect qualifi√© (Score: ${data.score}/100):`, prospect);
}

// Dashboard web simple
app.get('/', (req, res) => {
    const html = `
    <!DOCTYPE html>
    <html>
    <head>
        <title>Dashboard - SmartScale WebTech Bot</title>
        <meta charset="utf-8">
        <style>
            body { font-family: Arial, sans-serif; margin: 20px; }
            .header { background: #2563EB; color: white; padding: 20px; margin-bottom: 20px; }
            .stats { display: flex; gap: 20px; margin-bottom: 20px; }
            .stat { background: #f0f0f0; padding: 15px; border-radius: 5px; }
            .prospect { border: 1px solid #ddd; padding: 15px; margin-bottom: 10px; }
            .score-high { border-left: 5px solid #22c55e; }
            .score-medium { border-left: 5px solid #f59e0b; }
            .score-low { border-left: 5px solid #ef4444; }
        </style>
    </head>
    <body>
        <div class="header">
            <h1>ü§ñ Dashboard SmartScale WebTech Bot</h1>
            <p>Prospects qualifi√©s en temps r√©el</p>
        </div>
        
        <div class="stats">
            <div class="stat">
                <h3>Total Prospects</h3>
                <p>${prospects.length}</p>
            </div>
            <div class="stat">
                <h3>Prospects Chauds</h3>
                <p>${prospects.filter(p => p.score >= 75).length}</p>
            </div>
            <div class="stat">
                <h3>Prospects Ti√®des</h3>
                <p>${prospects.filter(p => p.score >= 50 && p.score < 75).length}</p>
            </div>
        </div>
        
        <h2>Derniers Prospects</h2>
        ${prospects.slice(-10).reverse().map(p => `
            <div class="prospect ${p.score >= 75 ? 'score-high' : p.score >= 50 ? 'score-medium' : 'score-low'}">
                <strong>Score: ${p.score}/100</strong> - ${p.phoneNumber}<br>
                <strong>Service:</strong> ${p.service} (${p.serviceType})<br>
                <strong>Budget:</strong> ${p.budget}<br>
                <strong>Autorit√©:</strong> ${p.autorite}<br>
                <strong>D√©lai:</strong> ${p.timeline}<br>
                <small>Date: ${new Date(p.timestamp).toLocaleString()}</small>
            </div>
        `).join('')}
    </body>
    </html>
    `;
    
    res.send(html);
});

app.get('/prospects.json', (req, res) => {
    res.json(prospects);
});

// Commande pour g√©n√©rer le code de jumelage
process.stdin.setEncoding('utf8');
process.stdin.on('data', (input) => {
    const command = input.toString().trim().toLowerCase();
    
    if (command === 'code' || command === 'pairing') {
        if (pairingCode) {
            console.log(`\nüî¢ CODE DE JUMELAGE ACTUEL : ${pairingCode}`);
            console.log('‚è±Ô∏è Ce code expire dans 2 minutes !');
        } else {
            console.log('\n‚ùå Aucun code de jumelage disponible.');
            console.log('Le code appara√Æt automatiquement au d√©marrage du bot.');
        }
    } else if (command === 'help' || command === 'aide') {
        console.log('\nüìã COMMANDES DISPONIBLES :');
        console.log('‚Ä¢ code      - Afficher le code de jumelage');
        console.log('‚Ä¢ help      - Afficher cette aide');
        console.log('‚Ä¢ status    - Statut de la connexion');
        console.log('‚Ä¢ prospects - Nombre de prospects');
    } else if (command === 'status') {
        console.log(`\nüìä STATUT DU BOT :`);
        console.log(`‚Ä¢ Dashboard : http://localhost:${PORT}`);
        console.log(`‚Ä¢ Prospects trait√©s : ${prospects.length}`);
        console.log(`‚Ä¢ WhatsApp Business : ${BUSINESS_WHATSAPP}`);
    } else if (command === 'prospects') {
        console.log(`\nüë• PROSPECTS : ${prospects.length} trait√©s`);
        const chauds = prospects.filter(p => p.score >= 75).length;
        const tiedes = prospects.filter(p => p.score >= 50 && p.score < 75).length;
        console.log(`üî• Chauds : ${chauds}`);
        console.log(`üü° Ti√®des : ${tiedes}`);
        console.log(`‚ùÑÔ∏è Froids : ${prospects.length - chauds - tiedes}`);
    }
});

// Chargement des prospects existants
if (fs.existsSync('./prospects.json')) {
    prospects = JSON.parse(fs.readFileSync('./prospects.json', 'utf8'));
}

// D√©marrage
app.listen(PORT, () => {
    console.log(`üìä Dashboard d√©marr√© sur http://localhost:${PORT}`);
    console.log('\nüí° AIDE :');
    console.log('‚Ä¢ Tapez "code" pour obtenir le code de jumelage');
    console.log('‚Ä¢ Tapez "help" pour voir toutes les commandes');
});

client.initialize();